// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  hard
  medium
  easy
}

model User {
  id          String        @unique @default(uuid())
  name        String
  email       String        @unique
  password    String
  isVerified  Boolean       @default(false)
  quizez      Quiz[]
  Submissions Submissions[]
}

model Quiz {
  id              String        @unique @default(uuid())
  title           String
  description     String
  password        String?
  authorID        String
  author          User          @relation(fields: [authorID], references: [id], onDelete: Cascade)
  timeLimitSec    Int?
  passingScore    Int?
  totalMarks      Int?
  attempts        Int?
  difficulty      Difficulty
  liveAt          DateTime?
  closeAt         DateTime?
  negativeMarking Boolean?
  shuffle         Boolean
  questions       Question[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Submissions     Submissions[]
}

model Question {
  id          String        @unique @default(ulid())
  text        String
  questionNo  Int
  options     Option[]
  quizId      String
  quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  marks       Int
  deduct      Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  markOptions markOptions[]
}

model Option {
  id          String        @unique @default(uuid())
  text        String
  isAnswer    Boolean       @default(false)
  optionNo    Int
  questionId  String
  question    Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  markOptions markOptions[]
}

model Submissions {
  id          String        @unique @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  quizId      String
  quiz        Quiz          @relation(fields: [quizId], references: [id])
  score       Int           @default(0)
  markOptions markOptions[]
  attemptNo   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model markOptions {
  optionId     String
  option       Option      @relation(fields: [optionId], references: [id])
  submissionId String
  submission   Submissions @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionID   String
  question     Question    @relation(fields: [questionID], references: [id])

  @@id([optionId, submissionId, questionID])
}
